}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") j=j+1
if (j!=0) break
}
j
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") j=j+1
if (j==1) break else print("holi")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") j=j+1
if (j==1) break
}
j
x <- 1:5
for (val in x) {
if (val == 3){
break
}
print(val)
}
x=combn(c("c(29)","c1(32)","a(32)","a1(30)","d(30)","d1(28)","s(29)","s1(29)"), 4, simplify = TRUE)
x
c("c(29)","c1(32)","a(32)","a1(30)","d(30)","d1(28)","s(29)","s1(29)")
x[,1]==c("c(29)","c1(32)","a(32)","a1(30)")
for (j in 1:70) {
i=0
for (k in 1:4) {
if (x[k,j]=="a1(30)" | x[k,j]=="d(30)") break else i=i+1
}
if (i!=0) print(x[,j])
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") {
j=j+1
}
if (j==1) {
break
}
print("hola")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") {
j=j+1
}
if (j==1) {
break
}
print("hola")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") {
j=j+1
}
if (j!=0) {
break
}
print("hola")
}
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") {
j=j+1
}
if (j!=0) {
break
}
print("hola")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") {
j=j+1
}
if (j!=0) {
break
}
print("hola")
}
j
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)") j=j+1 else if (x[i,1]=="d(30)") j=j+1
if (j!=0) break else print("hola")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)") j=j+1 else if (x[i,1]=="d(30)") j=j+1
print(j)
if (j!=0) break else print("hola")
}
print(x[1,1])
x=combn(c("a(32)","a1(30)","c(29)","c1(32)","d(30)","d1(28)","s(29)","s1(29)"), 4, simplify = TRUE)
x
c("c(29)","c1(32)","a(32)","a1(30)","d(30)","d1(28)","s(29)","s1(29)")
x[,1]==c("c(29)","c1(32)","a(32)","a1(30)")
for (j in 1:70) {
i=0
for (k in 1:4) {
if (x[k,j]=="a1(30)" | x[k,j]=="d(30)") break else i=i+1
}
if (i!=0) print(x[,j])
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)") j=j+1 else if (x[i,1]=="d(30)") j=j+1
print(j)
if (j!=0) break else print("hola")
}
j=0
for (i in 1:4) {
if (x[i,1]=="a1(30)") break else if (x[i,1]=="d(30)") break
print(x[i,1])
}
for (i in 1:4) {
if (x[i,1]=="a1(30)" | x[i,1]=="d(30)") break
print(x[i,1])
}
for (i in 1:4) {
if (x[i,1]=="a1(30)" || x[i,1]=="d(30)") break
print(x[i,1])
}
for (j in 1:70) {
i=0
for (k in 1:4) {
if (x[k,j]=="a1(30)" || x[k,j]=="d(30)") i=i+1
}
if (i==0) print(x[,j])
}
plot(c(1,2),x^2)
plot(x=c(1,2),x^2)
plot(x=c(1,2),x)
x=c(1,2)
plot(x,x)
pbeta(0.034,19/5,456/5)
pbeta(0.034,3.8,91.2)
install.packages("installr")
library(installr)
updateR()
x=c(1,2,3,4,5,6,7,8,9)
y=1-x
plot(x,y)
?plot
plot(x,y,xlim = c(0,1),ylim = c(0,1))
plot(x,1-x,xlim = c(0,1),ylim = c(0,1))
curve(1-x,xlim = c(0,1),ylim = c(0,1))
curve(1-x,xlim = c(0,5),ylim = c(0,5))
curve(2-x,add = TRUE)
curve(3-x,add = TRUE)
curve(4-x,add = TRUE)
curve(5-x,add = TRUE)
curve(1-x,xlim = c(0,5),ylim = c(0,5), col=1)
curve(2-x,add = TRUE,col=2)
curve(3-x,add = TRUE, col=3)
curve(4-x,add = TRUE, col=4)
curve(5-x,add = TRUE, col=5)
curve(1-x,xlim = c(0,5),ylim = c(0,5), col=1, xlab = "x", ylab = "y")
curve(2-x,add = TRUE,col=2)
curve(3-x,add = TRUE, col=3)
curve(4-x,add = TRUE, col=4)
curve(5-x,add = TRUE, col=5)
?sqrt
curve((1-sqrt(x))^2,xlim = c(0,5),ylim = c(0,5), col=1, xlab = "x", ylab = "y")
curve((2-sqrt(x))^2,add = TRUE,col=2)
curve((3-sqrt(x))^2,add = TRUE, col=3)
curve((4-sqrt(x))^2,add = TRUE, col=4)
curve((5-sqrt(x))^2,add = TRUE, col=5)
curve((1-sqrt(x))^2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve((2-sqrt(x))^2,add = TRUE,col=2)
curve((3-sqrt(x))^2,add = TRUE, col=3)
curve((4-sqrt(x))^2,add = TRUE, col=4)
curve((5-sqrt(x))^2,add = TRUE, col=5)
curve((1-sqrt(x))^2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve((2-sqrt(x))^2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve((2-sqrt(x))^2,add = TRUE,col=2)
curve((3-sqrt(x))^2,add = TRUE, col=3)
curve((4-sqrt(x))^2,add = TRUE, col=4)
curve((5-sqrt(x))^2,add = TRUE, col=5)
curve((5-sqrt(x))^2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve((2-sqrt(x))^2,add = TRUE,col=2)
curve((3-sqrt(x))^2,add = TRUE, col=3)
curve((5-sqrt(x))^2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve((3-sqrt(x))^2,add = TRUE, col=3)
curve((4-sqrt(x))^2,add = TRUE, col=4)
curve(1/x,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(2/x,add = TRUE,col=2)
curve(3/x,add = TRUE, col=3)
curve(4/x,add = TRUE, col=4)
curve(5/x,add = TRUE, col=5)
curve(1/x,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(2/x,add = TRUE,col=2)
curve(8/x,add = TRUE, col=3)
curve(16/x,add = TRUE, col=4)
curve(20/x,add = TRUE, col=5)
curve(1/x,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(4/x,add = TRUE,col=2)
curve(8/x,add = TRUE, col=3)
curve(16/x,add = TRUE, col=4)
curve(20/x,add = TRUE, col=5)
curve(1/x,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(4/x,add = TRUE,col=2)
curve(8/x,add = TRUE, col=3)
curve(16/x,add = TRUE, col=4)
curve(32/x,add = TRUE, col=5)
curve(1/(1+x)x,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(4/(1+x),add = TRUE,col=2)
curve(8/(1+x),add = TRUE, col=3)
curve(16/(1+x),add = TRUE, col=4)
curve(32/(1+x),add = TRUE, col=5)
curve(1/(1+x),xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(4/(1+x),add = TRUE,col=2)
curve(8/(1+x),add = TRUE, col=3)
curve(16/(1+x),add = TRUE, col=4)
curve(32/(1+x),add = TRUE, col=5)
curve(1/(1+x)-2,xlim = c(0,10),ylim = c(0,10), col=1, xlab = "x", ylab = "y")
curve(4/(1+x)-2,add = TRUE,col=2)
curve(8/(1+x)-2,add = TRUE, col=3)
curve(16/(1+x)-2,add = TRUE, col=4)
curve(32/(1+x)-2,add = TRUE, col=5)
curve(df(x,6,2171),from = 0, to = 4, n = 5000, col= 'pink', lwd=2, add = T)
curve(df(x,6,2171),from = 0, to = 4, n = 5000, col= 'pink', lwd=2)
curve(df(x,6,2171),from = 0, to = 4, n = 5000, col= 'pink', lwd=2,ylav)
curve(df(x,6,2171),from = 0, to = 4, n = 5000, col= 'pink', lwd=2,ylab = "F(6,2171,x)")
curve(df(x,6,2171),from = 0, to = 4, n = 5000, col= 'pink', lwd=2,ylab = "F(6,2171,x)",tag=c())
datos<-read.csv(choose.files(),header =  TRUE)
datos<-read.csv(choose.files(),header =  TRUE)
datos
rl<-lm(LFPRFEMALE~GDPPPP,data=datos)
datos<-read.csv(choose.files(),header =  TRUE)
datos
rl<-lm(LFPRFEMALE~GDPPPP,data = datos)
rl<-lm(LFPRFemale~GDPPPP,data = datos)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(rl)
datos<-read.csv(choose.files(),header =  TRUE)
datos
rl<-lm(LFPRFemale~GDPPPP,data = datos)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(rl)
cooks.distance(rl)
rllinlog<-lm(LFPRFemale~log(GDPPPP),data = datos)
summary(rllinlog)
rlint<-rl<-lm(LFPRFemale~GDPPPP-1,data = datos)
summary(rlint)
rlloglin<-lm(log(LFPRFemale)~GDPPPP,data = datos)
summary(rlloglinrl)
summary(rlloglin)
rlloglin<-lm(log(LFPRFemale)~log(GDPPPP),data = datos)
rlloglog<-lm(log(LFPRFemale)~log(GDPPPP),data = datos)
summary(rlloglog)
rlrcp<-lm(LFPRFemale~1/GDPPPP,data = datos)
summary(rlrcp)
rlrcp<-lm(LFPRFemale~(1/GDPPPP),data = datos)
summary(rlrcp)
rlrcp<-lm(LFPRFemale~GDPPPP^(-1),data = datos)
summary(rlrcp)
rlrcp<-lm(LFPRFemale ~ 1/GDPPPP,data = datos)
rlrcp<-lm(LFPRFemale ~ (1/GDPPPP),data = datos)
summary(rlrcp)
?abline
rlint<-rl<-lm(LFPRFemale~GDPPPP-1,data = datos)
summary(rlint)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(0,0.117497)
abline(rlint)
rllinlog<-lm(LFPRFemale~log(GDPPPP),data = datos)
summary(rllinlog)
plot(datos$GDPPPP,log(datos$LFPRFemale))
abline(rllinlog)
abline(59.8157,-1.6090)
abline(59.8157,1.6090)
plot(log(datos$GDPPPP(),datos$LFPRFemale)
rllinlog<-lm(LFPRFemale~log(GDPPPP),data = datos)
summary(rllinlog)
plot(log(datos$GDPPPP),datos$LFPRFemale)
abline(rllinlog)
plot(datos$GDPPPP,log(datos$LFPRFemale))
abline(rlloglin)
rlloglin<-lm(log(LFPRFemale)~GDPPPP,data = datos)
summary(rlloglin)
plot(datos$GDPPPP,log(datos$LFPRFemale))
abline(rlloglin)
rlloglog<-lm(log(LFPRFemale)~log(GDPPPP),data = datos)
summary(rlloglog)
plot(log(datos$GDPPPP),log(datos$LFPRFemale))
abline(rlloglog)
rlrcp<-lm(LFPRFemale ~ (1/GDPPPP),data = datos)
summary(rlrcp)
rlrcp<-lm(LFPRFemale ~ (1/GDPPPP),data = datos)
summary(rlrcp)
1/datos$GDPPPP
datos$rcpGDPPPP<-1/datos$GDPPPP
rlrcp<-lm(LFPRFemale ~ rcpGDPPPP,data = datos)
summary(rlrcp)
rlrcp<-lm(LFPRFemale ~ rcpGDPPPP,data = datos)
summary(rlrcp)
plot(datos$GDPPPP,1/datos$LFPRFemale)
abline(rlrcp)
plot(1/datos$GDPPPP,datos$LFPRFemale)
abline(rlrcp)
rllogrcp<-lm(log(LFPRFemale) ~ rcpGDPPPP,data = datos)
summary(rllogrcp)
plot(1/datos$GDPPPP,log(datos$LFPRFemale))
abline(rllogrcp)
datos$GDPPPP3<-(datos$GDPPPP)^3
rlp3<-lm(LFPRFemale ~ GDPPPP3)
rlp3<-lm(LFPRFemale ~ GDPPPP3,data = datos)
summary(rlp3)
plot(datos$GDPPPP3,datos$LFPRFemale)
abline(rlp3)
View(rlp3)
View(datos)
AIC(rl)
datos$GDPPPP3<-(datos$GDPPPP)^3
rlp3<-lm(LFPRFemale ~ GDPPPP3,data = datos)
summary(rlp3)
cooks.distance(rlint)
hatvalues(rlint)
cooks.distance(rlint)[1]
rl<-lm(LFPRFemale~GDPPPP,data = datos)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(rl)
for (i in 1:175) {
if cooks.distance(rl)[i]> print(cooks.distance(rl)[i])
}
?if
exit
for (i in 1:175) {
if(cooks.distance(rl)[i]>1) print(cooks.distance(rl)[i])
}
AIC(rlloglin)
AIC(rl)
hatvalues(rl)
summary(rl)
hatvalues(rl)
rllinlog<-lm(LFPRFemale~log(GDPPPP),data = datos)
summary(rllinlog)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(rllinlog)
rl<-lm(LFPRFemale~GDPPPP,data = datos)
plot(datos$GDPPPP,datos$LFPRFemale)
abline(rl)
hatvalues(rl)
mean(hatvalues(rl))
4/175
2/175
for (i in 1:175) {
exit
for (i in 1:175) {
if(hatvalues(rl)[i]>=2/175) print(i)
}
Hrl<-hatvalues(rl)
for (i in 1:175) {
if(Hrl[i]>=2/175) print(i)
}
Hrl<-hatvalues(rl)
for (i in 1:175) {
if(Hrl[i]>=2/175) {
print(i)
}
}
Hrl
exit
stop
setwd("D:/Users/Carlos Ponce/OneDrive - Universidad Autonoma de San Luis Potosi - UASLP/Maestría_Semestre_2/Econometría/Tareas/Tarea_3")
load("D:/Users/Carlos Ponce/OneDrive - Universidad Autonoma de San Luis Potosi - UASLP/Maestría_Semestre_2/Econometría/Tareas/Tarea_3/.RData")
#cargamos los datos Female GDPPPP
datos<-read.csv(choose.files(),header =  TRUE)
datos
#regresión lineal simple
#realizamos al regresion lineal simple
rl<-lm(GHI~BPL+GDP,data = datos)
summary(rl)
#a) Verificamos si hay multicolinealidad
vif(rl)
rl$residuals
predict(rl)
plot(predict(rl),rl$residuals,ylab = "Residuales", xlab = "Valores estimados",
title(main = "Residuales vs. Valores estimados"),pch=19,col="darkorchid1")
abline(rl)
library(lmtest)
S=datos[order(datos$BPL,datos$GHI,datos$GDP),]
MR<-lm(GHI~BPL+GDP,S)
gqtest(MR,fraction = 10)
#d) prueba de BPG
bptest(rl,studentize = FALSE)
#e) prueba de white
white_lm(rl,interactions=TRUE)
#f) con el FFV tenemos
FFV=3*datos$BPL+datos$GDP
W=1/FFV
rl1<-lm(GHI~BPL+GDP,weights = W,data = datos)
predict(rl1, newdata=data.frame(BPL=3.85,GDP=13.15))
#h) cargamos la libreria randtests
library(randtests)
runs.test(MR$residuals,threshold = 0)
#i) Prueba de d-w
dwtest(MR)
#j) Eliminando autocorrelación, asumiendo que es perfecta
R<-data.frame()
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-datos[i+1,j+1]-datos[i,j+1]
}
}
MRA<-lm(V1~V2+V3,R)
predict(MRA, newdata=data.frame(V2=4.45,V3=12.54))
dwtest(MR)
R<-data.frame()
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-S[i+1,j+1]-(1-1.976/2)S[i,j+1]
}
}
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-S[i+1,j+1]-(1-1.976/2)*S[i,j+1]
}
}
MRA<-lm(V1~V2+V3,R)
predict(MRA, newdata=data.frame(V2=4.45,V3=12.54))
dwtest(rl)
R<-data.frame()
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-datos[i+1,j+1]-(1-2.2631/2)*datos[i,j+1]
}
}
MRA<-lm(V1~V2+V3,R)
predict(MRA, newdata=data.frame(V2=4.45,V3=12.54))
(MR)
dwtest(MR)
1-1.573
4-1.573
4-1.489
(rl)
dwtest(rl)
View(R)
9.4-(1-2.2631/2)*12.2
dwtest(rl)
R<-data.frame()
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-datos[i+1,j+1]-(1-2.2631/2)*datos[i,j+1]
}
}
MRA<-lm(V1~V2+V3,R)
predict(MRA, newdata=data.frame(V2=4.45,V3=12.54))
X[,1]<-datos[,3]
X[,2]<-datos[,4]
X<-c()
X[,1]<-datos[,3]
X<-matrix(NA,93,2)
X[,1]<-datos[,3]
X[,2]<-datos[,4]
X
rl$residuals
D<-diag(rl$residuals^2,93,93)
D
1/93*(t(X)%*%D%*%X)
X<-matrix(NA,93,3)
X[,1]<-1
X[,2]<-datos[,3]
X[,3]<-datos[,4]
X
D<-diag(rl$residuals^2,93,93)
1/93*(t(X)%*%D%*%X)
install.packages("sandwich")
library(sandwich)
vcovHC(rl,type='HC')
vif(rl)
??vif
library(car)
vif(rl)
library(lmtest)
S=datos[order(datos$BPL,datos$GHI,datos$GDP),]
MR<-lm(GHI~BPL+GDP,S)
gqtest(MR,fraction = 10)
bptest(rl,studentize = FALSE)
??bptest
bptest(rl,studentize = FALSE)
white_lm(rl,interactions=TRUE)
??white_lm
library(skedastic)
bptest(rl,studentize = FALSE)
white_lm(rl,interactions=TRUE)
FFV=3*datos$BPL+datos$GDP
W=1/FFV
rl1<-lm(GHI~BPL+GDP,weights = W,data = datos)
predict(rl1, newdata=data.frame(BPL=3.85,GDP=13.15))
library(sandwich)
vcovHC(rl,type='HC')
library(randtests)
runs.test(MR$residuals,threshold = 0)
dwtest(MR)
dwtest(rl)
R<-data.frame()
for (i in 1:93) {
for (j in 1:3) {
R[i,j]<-datos[i+1,j+1]-(1-2.2631/2)*datos[i,j+1]
}
}
MRA<-lm(V1~V2+V3,R)
predict(MRA, newdata=data.frame(V2=4.45,V3=12.54))
library(sandwich)
vcovHC(rl,type='HC')
